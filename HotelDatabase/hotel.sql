DROP TABLE OSOBA CASCADE CONSTRAINTS;
DROP TABLE IZBA CASCADE CONSTRAINTS;
DROP TABLE ZAMESTNANEC CASCADE CONSTRAINTS;
DROP TABLE ZAKAZNIK CASCADE CONSTRAINTS;
DROP TABLE REZERVACIA CASCADE CONSTRAINTS;
DROP TABLE FAKTURA CASCADE CONSTRAINTS;
DROP TABLE SLUZBA CASCADE CONSTRAINTS;

CREATE TABLE Osoba
(
    id_osoby INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    meno VARCHAR2(255) NOT NULL,
    priezvisko VARCHAR2(255) NOT NULL,
    email VARCHAR2(255),
    telefon VARCHAR2(20),
    adresa VARCHAR2(255),
    datum_narodenia DATE,
    pohlavie VARCHAR2(1),
    pozicia VARCHAR2(255)
);

CREATE TABLE Zamestnanec
(
    id_zamestnanca INT PRIMARY KEY,
    plat DECIMAL(10,2) CHECK(plat >= 0),
    pracovna_pozicia VARCHAR2(255),
    CONSTRAINT fk_zamestnanec_osoba FOREIGN KEY (id_zamestnanca) REFERENCES Osoba(id_osoby)
);

CREATE TABLE Zakaznik
(
    id_zakaznika INT PRIMARY KEY,
    CONSTRAINT  fk_zakaznik_osoba FOREIGN KEY (id_zakaznika) REFERENCES Osoba(id_osoby)
);

--zamestnanec a zakaznik su generalizacia osoby
--v osobe sa vytvori id_osoby, ktore sa pouziva ako cudzi kluc v zamestnancovi a zakaznikovi
--v zamestnancovi a zakaznikovi sa vytvori id_zamestnanca a id_zakaznika, ktore sa pouzivaju ako primarne kluce

CREATE TABLE Izba
(
    id_izby INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    cena DECIMAL(10,2) CHECK(cena >= 0),
    dostupnost VARCHAR2(1),
    rozmery VARCHAR2(255),
    pocet_lozok INT CHECK(pocet_lozok > 0)
);

CREATE TABLE Rezervacia
(
    id_rezervacie INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    id_zakaznika INT,
    id_izby INT,
    datum_prichodu DATE,
    datum_odchodu DATE,
    status VARCHAR2(255),
    druh_platby VARCHAR2(255),
    CONSTRAINT fk_rezervacia_zakaznik FOREIGN KEY (id_zakaznika) REFERENCES Osoba(id_osoby),
    CONSTRAINT fk_rezervacia_izba FOREIGN KEY (id_izby) REFERENCES Izba(id_izby)
);

CREATE TABLE Faktura
(
    id_faktury INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    id_rezervacie INT,
    id_zakaznika INT,
    suma DECIMAL(10,2) CHECK(suma >= 0),
    druh_platby VARCHAR2(255),
    CONSTRAINT fk_faktura_rezervacia FOREIGN KEY (id_rezervacie) REFERENCES Rezervacia(id_rezervacie),
    CONSTRAINT fk_faktura_zakaznik FOREIGN KEY (id_zakaznika) REFERENCES Osoba(id_osoby)
);

--weak entity
CREATE TABLE Sluzba
(
    id_rezervacie INT,
    id_sluzby INT,
    popis VARCHAR2(255),
    cena DECIMAL(10,2) CHECK(cena >= 0),
    PRIMARY KEY (id_rezervacie, id_sluzby),
    CONSTRAINT fk_sluzba_rezervacia FOREIGN KEY (id_rezervacie) REFERENCES Rezervacia(id_rezervacie)
);

--trigger na vytvorenie faktury po vytvoreni rezervacie, vypocita sumu na zaklade ceny izby a dlzky pobytu
CREATE OR REPLACE TRIGGER vytvorenie_faktury
AFTER INSERT ON Rezervacia
FOR EACH ROW
DECLARE
    v_id_rezervacie Rezervacia.id_rezervacie%TYPE;
    v_id_zakaznika Rezervacia.id_zakaznika%TYPE;
    v_druh_platby Rezervacia.druh_platby%TYPE;
    v_suma DECIMAL(10,2);
    v_dlzka_pobytu INT;
    v_cena_izby DECIMAL(10,2);
BEGIN
    v_id_rezervacie := :NEW.id_rezervacie;
    v_id_zakaznika := :NEW.id_zakaznika;
    v_druh_platby := :NEW.druh_platby;

    v_dlzka_pobytu := :NEW.datum_odchodu - :NEW.datum_prichodu;

    SELECT cena INTO v_cena_izby
    FROM Izba
    WHERE id_izby = :NEW.id_izby;

    -- vypocet sumy na zaklade ceny izby a dlzky pobytu
    v_suma := v_dlzka_pobytu * v_cena_izby;

    INSERT INTO Faktura (id_rezervacie, id_zakaznika, suma, druh_platby)
    VALUES (v_id_rezervacie, v_id_zakaznika, v_suma, v_druh_platby);
END;

--trigger na aktualizaciu sumy vo fakture po pridani sluzby
CREATE OR REPLACE TRIGGER aktualizacia_faktury_po_pridani_sluzby
AFTER INSERT ON Sluzba
FOR EACH ROW
DECLARE
    v_id_rezervacie Sluzba.id_rezervacie%TYPE;
    v_cena_sluzby Sluzba.cena%TYPE;
BEGIN
    v_id_rezervacie := :NEW.id_rezervacie;
    v_cena_sluzby := :NEW.cena;

    UPDATE Faktura
    SET suma = suma + v_cena_sluzby
    WHERE id_rezervacie = v_id_rezervacie;
END;


INSERT INTO Osoba (meno, priezvisko, email, telefon, adresa, datum_narodenia, pohlavie)
VALUES ('Jan', 'Novak', 'jan.novak@example.com', '0900123456', 'Hlavna 1, 12345 Bratislava', DATE '1990-01-01', 'M');

INSERT INTO Zamestnanec (id_zamestnanca, plat, pracovna_pozicia)
VALUES (1, 1000, 'recepcny');

INSERT INTO Osoba (meno, priezvisko, email, telefon, adresa, datum_narodenia, pohlavie)
VALUES ('Martin', 'Velky', 'martin.velky@gmail.com', '09884212345', 'Vedlajsia 2, 12345 Bratislava', DATE '1995-01-01', 'M');

INSERT INTO Zakaznik (id_zakaznika)
VALUES (2);

INSERT INTO Osoba (meno, priezvisko, email, telefon, adresa, datum_narodenia, pohlavie)
VALUES ('Alice', 'Smith', 'alice.smith@example.com', '1234567890', '123 Main St, Anytown, USA', DATE '1985-07-15', 'F');

INSERT INTO Zakaznik (id_zakaznika)
VALUES (3);

INSERT INTO Osoba (meno, priezvisko, email, telefon, adresa, datum_narodenia, pohlavie)
VALUES ('Bob', 'Johnson', 'bob.johnson@example.com', '0987654321', '456 Elm St, Othertown, USA', DATE '1992-03-22', 'M');

INSERT INTO Zakaznik (id_zakaznika)
VALUES (4);

INSERT INTO Osoba (meno, priezvisko, email, telefon, adresa, datum_narodenia, pohlavie)
VALUES ('Emily', 'Brown', 'emily.brown@example.com', '1112223333', '789 Oak St, Somewhere, USA', DATE '1979-11-03', 'F');

INSERT INTO Zakaznik (id_zakaznika)
VALUES (5);

INSERT INTO Osoba (meno, priezvisko, email, telefon, adresa, datum_narodenia, pohlavie)
VALUES ('Michael', 'Davis', 'michael.davis@example.com', '5554446666', '321 Pine St, Nowhere, USA', DATE '1988-09-10', 'M');

INSERT INTO Zakaznik (id_zakaznika)
VALUES (6);

INSERT INTO Osoba (meno, priezvisko, email, telefon, adresa, datum_narodenia, pohlavie)
VALUES ('Jana', 'Novakova', 'jana.novakova@example.com', '0900123457', 'Hlavna 2, 12345 Bratislava', DATE '1990-01-01', 'F');

INSERT INTO Zakaznik (id_zakaznika)
VALUES (7);

INSERT INTO Osoba (meno, priezvisko, email, telefon, adresa, datum_narodenia, pohlavie)
VALUES ('Rebeka', 'Jozefova', 'rebeka.jozefova@example.com', '069420654', 'Reissigova, 12 Brno', DATE '2002-02-05', 'F');

INSERT INTO Zamestnanec (id_zamestnanca, plat, pracovna_pozicia)
VALUES (8, 1200, 'upratovacka');

INSERT INTO Osoba (meno, priezvisko, email, telefon, adresa, datum_narodenia, pohlavie)
VALUES ('Jozef', 'Rebekovy', 'jozef.rebekovy@example.com', '069420669', 'Reissigova, 123 Brno', DATE '2000-02-05', 'F');

INSERT INTO Zamestnanec (id_zamestnanca, plat, pracovna_pozicia)
VALUES (9, 1050, 'recepcny');


INSERT INTO Izba (cena, dostupnost, rozmery, pocet_lozok)
VALUES (50, 'A', '20x20', 2);

INSERT INTO Izba (cena, dostupnost, rozmery, pocet_lozok)
VALUES (60, 'A', '25x20', 2);

INSERT INTO Izba (cena, dostupnost, rozmery, pocet_lozok)
VALUES (45, 'A', '14x22', 2);

INSERT INTO Izba (cena, dostupnost, rozmery, pocet_lozok)
VALUES (55, 'A', '10x20', 2);

INSERT INTO Izba (cena, dostupnost, rozmery, pocet_lozok)
VALUES (65, 'A', '20x18', 2);


INSERT INTO Rezervacia (id_zakaznika, id_izby, datum_prichodu, datum_odchodu, status, druh_platby)
VALUES (2, 1, DATE '2019-11-12', DATE '2019-11-19', 'potvrdena', 'hotovost');

INSERT INTO Rezervacia (id_zakaznika, id_izby, datum_prichodu, datum_odchodu, status, druh_platby)
VALUES (2, 3, DATE '2019-12-11', DATE '2019-12-27', 'potvrdena', 'hotovost');

INSERT INTO Rezervacia (id_zakaznika, id_izby, datum_prichodu, datum_odchodu, status, druh_platby)
VALUES (3, 2, DATE '2019-11-11', DATE '2019-11-17', 'potvrdena', 'karta');

INSERT INTO Rezervacia (id_zakaznika, id_izby, datum_prichodu, datum_odchodu, status, druh_platby)
VALUES (3, 1, DATE '2023-09-11', DATE '2023-09-17', 'potvrdena', 'karta');

INSERT INTO Rezervacia (id_zakaznika, id_izby, datum_prichodu, datum_odchodu, status, druh_platby)
VALUES (4, 5, DATE '2020-02-10', DATE '2020-02-13', 'potvrdena', 'hotovost');

INSERT INTO Rezervacia (id_zakaznika, id_izby, datum_prichodu, datum_odchodu, status, druh_platby)
VALUES (4, 1, DATE '2021-04-10', DATE '2021-04-16', 'potvrdena', 'karta');

INSERT INTO Rezervacia (id_zakaznika, id_izby, datum_prichodu, datum_odchodu, status, druh_platby)
VALUES (4, 2, DATE '2022-10-01', DATE '2022-10-09', 'potvrdena', 'hotovost');

INSERT INTO Rezervacia (id_zakaznika, id_izby, datum_prichodu, datum_odchodu, status, druh_platby)
VALUES (5, 2, DATE '2023-07-25', DATE '2023-07-29', 'potvrdena', 'karta');

INSERT INTO Rezervacia (id_zakaznika, id_izby, datum_prichodu, datum_odchodu, status, druh_platby)
VALUES (6, 3, DATE '2022-04-12', DATE '2022-04-20', 'potvrdena', 'karta');



INSERT INTO Sluzba (id_rezervacie, id_sluzby, popis, cena)
VALUES (1, 1, 'ranajky', 10);

INSERT INTO Sluzba (id_rezervacie, id_sluzby, popis, cena)
VALUES (5, 2, 'obed', 15);

--select vyberie faktury, ktore maju sumu vacsiu ako 400
SELECT o.meno, o.priezvisko, f.suma FROM Osoba o JOIN Faktura f ON o.id_osoby = f.id_zakaznika WHERE f.suma > 400;
--select vyberie faktury, ktore maju druh platby hotovost
SELECT o.meno, o.priezvisko, f.druh_platby FROM Osoba o JOIN Faktura f ON o.id_osoby = f.id_zakaznika WHERE f.druh_platby = 'hotovost';
--select vyberie zakaznikov, ktori mali izby s rozmermi 20x20
SELECT o.meno, o.priezvisko, i.rozmery FROM Osoba o JOIN Rezervacia r ON o.id_osoby = r.id_zakaznika JOIN Izba i ON r.id_izby = i.id_izby WHERE i.rozmery = '20x20';

--select vrati priemernu sumu faktur pre kazdy druh platby
SELECT f.druh_platby, AVG(f.suma) AS average_amount FROM Faktura f GROUP BY f.druh_platby;

--select vrati sumu vsetkych faktur pre kazdeho zakaznika
SELECT o.id_osoby, o.meno, o.priezvisko, SUM(f.suma) AS total_sum FROM Osoba o JOIN Zakaznik z ON o.id_osoby = z.id_zakaznika JOIN Faktura f ON o.id_osoby = f.id_zakaznika GROUP BY o.id_osoby, o.meno, o.priezvisko;

--select vrati zakaznikov, ktori mali datum prichodu po 1.1.2022 (nemal by sa tam nachadzat Martin Velky a Jana Novakova)
SELECT o.meno, o.priezvisko
FROM Osoba o
JOIN Zakaznik z ON o.id_osoby = z.id_zakaznika
WHERE z.id_zakaznika IN (
    SELECT id_zakaznika
    FROM Rezervacia
    WHERE datum_prichodu > DATE '2022-01-01'
);

--select vrati vsetkych zakaznikov, ktori este nevytvorili ziadnu rezervaciu (mala by sa tam nachadzat iba Jana Novakova)
SELECT o.meno, o.priezvisko
FROM Osoba o
WHERE EXISTS (
    SELECT 1
    FROM Zakaznik z
    WHERE z.id_zakaznika = o.id_osoby
) AND NOT EXISTS (
    SELECT 1
    FROM Rezervacia r
    WHERE r.id_zakaznika = o.id_osoby
);

--vypocita priemernu mzdu zamestnanca
CREATE OR REPLACE PROCEDURE PriemernaMzda AS
    priemerna_mzda Zamestnanec.plat%TYPE;
    celkova_mzda Zamestnanec.plat%TYPE;
    pocet_zamestnancov INTEGER;
BEGIN
    SELECT SUM(plat), COUNT(*)
    INTO celkova_mzda, pocet_zamestnancov
    FROM Zamestnanec;

    priemerna_mzda := celkova_mzda / pocet_zamestnancov;

    DBMS_OUTPUT.put_line('Priemerna mzda zamestnanca ' || priemerna_mzda);

EXCEPTION
    WHEN ZERO_DIVIDE THEN
        DBMS_OUTPUT.put_line('Chyba: Delenie nulou.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('Chyba: ' || SQLERRM);
END;

-- vypocita priemernu sumu, ktoru zakaznik minie za pobyt
CREATE OR REPLACE PROCEDURE PriemernaMinutaCiastka AS
    priemerne_minie Faktura.suma%TYPE;
    minute_dokopy Faktura.suma%TYPE;
    pocet_faktur INTEGER;
BEGIN
    SELECT SUM(suma), COUNT(*)
    INTO minute_dokopy, pocet_faktur
    FROM Faktura;

    priemerne_minie := minute_dokopy / pocet_faktur;

    DBMS_OUTPUT.put_line('Priemerne zakaznik minie : ' || priemerne_minie);

EXCEPTION
    WHEN ZERO_DIVIDE THEN
        DBMS_OUTPUT.put_line('Chyba: Delenie nulou.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('Chyba: ' || SQLERRM);
END;

BEGIN
    PriemernaMzda();
    PriemernaMinutaCiastka();
END;

CREATE INDEX idx_id_izby ON Rezervacia(id_izby);
EXPLAIN PLAN FOR
SELECT Izba.id_izby, COUNT(Rezervacia.id_rezervacie) AS pocet_rezervaci
FROM Izba
LEFT JOIN Rezervacia ON Izba.id_izby = Rezervacia.id_izby
GROUP BY Izba.id_izby;

-- kategorizacia izieb podla ceny
WITH kategoria_izieb AS (
    SELECT
        id_izby,
        cena,
        CASE
            WHEN cena >= 60 THEN 'Vyssia trieda'
            WHEN cena >= 50 THEN 'Stredna trieda'
            ELSE 'Nizsia trieda'
        END AS cenova_kategoria
    FROM
        Izba
)
--vyberie izby vyssia trieda
SELECT * FROM kategoria_izieb WHERE cenova_kategoria = 'Vyssia trieda';

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);
SELECT * FROM Osoba;
SELECT * FROM Zamestnanec;
SELECT * FROM Zakaznik;
SELECT * FROM Izba;
SELECT * FROM Rezervacia;
SELECT * FROM Faktura;
SELECT * FROM Sluzba;

